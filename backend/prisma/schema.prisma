datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              Int         @id @default(autoincrement())
  fullName        String
  profilePicture  String?
  gender          String
  birthdate       DateTime
  email           String      @unique
  password        String
  isAdmin         Boolean     @default(false)
  isShopOwner     Boolean     @default(false)
  pets            Pet[]
  posts           Post[]
  tasks           Task[]
  vaccinationRecords VaccinationRecord[]
  medicalRecords  MedicalRecord[]
  comments        Comment[]
  replies         Reply[]
  postLikes       PostLike[]
  shopApplications ShopApplication[]
  shop            Shop?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Pet {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  name            String
  petPicture      String?
  birthdate       DateTime
  type            String
  breed           String
  healthCondition String?
  tasks           Task[]
  vaccinationRecords VaccinationRecord[]
  medicalRecords  MedicalRecord[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Task {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  petId           Int
  pet             Pet         @relation(fields: [petId], references: [id])
  type            String
  name            String
  description     String
  time            DateTime
  frequency       String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Post {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  content         String
  image           String?
  likes           Int         @default(0)
  comments        Comment[]
  postLikes       PostLike[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Comment {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  postId          Int
  post            Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  content         String
  replies         Reply[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Reply {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  commentId       Int
  comment         Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  content         String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model PostLike {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  postId          Int
  post            Post        @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt       DateTime    @default(now())

  @@unique([userId, postId])
}

model VaccinationRecord {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  petId           Int
  pet             Pet         @relation(fields: [petId], references: [id])
  vaccineName     String
  date            DateTime
  expirationDate  DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model MedicalRecord {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  petId           Int
  pet             Pet         @relation(fields: [petId], references: [id])
  type            String      // Type of medication/treatment
  medicineName    String
  veterinarian    String
  clinic          String
  date            DateTime
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Shop {
  id              Int         @id @default(autoincrement())
  userId          Int         @unique  // One-to-one with User
  user            User?       @relation(fields: [userId], references: [id])
  shopName        String
  shopImage       String?
  shopLocation    String
  latitude        Float
  longitude       Float
  bio             String
  contactNumber   String
  shopMessage     String
  shopType        String
  openingTime     String
  closingTime     String
  availableDays   String[]    // Array of days
  isAvailable     Boolean     @default(true)
  approved        Boolean     @default(false)  // New: Shop approval status
  promotionalPosts PromotionalPost[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model ShopApplication {
  id              Int         @id @default(autoincrement())
  userId          Int
  user            User        @relation(fields: [userId], references: [id])
  shopName        String
  shopImage       String?
  shopLocation    String
  latitude        Float       @default(0)
  longitude       Float       @default(0)
  bio             String
  contactNumber   String
  shopMessage     String
  shopType        String
  openingTime     String
  closingTime     String
  availableDays   String[]    // Array of days
  isAvailable     Boolean     @default(true)
  status          String      @default("pending") // pending, approved, rejected
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model PromotionalPost {
  id              Int         @id @default(autoincrement())
  shopId          Int
  shop            Shop        @relation(fields: [shopId], references: [id], onDelete: Cascade)
  caption         String?
  image           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}
